package com.siebel.oracle

import org.apache.spark.sql.SparkSession
import java.util.Properties
import org.apache.log4j.{Logger, Level} // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Debug Logging

import com.google.cloud.secretmanager.v1.{AccessSecretVersionRequest, SecretManagerServiceClient, SecretVersionName}
import org.json4s._ // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö DefaultFormats
import org.json4s.native.JsonMethods._ // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö parse method

object SimpleOracleConnectionTest {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á Secret ‡∏à‡∏≤‡∏Å Secret Manager
  def getSecret(projectId: String, secretId: String, versionId: String = "latest"): String = {
    var client: SecretManagerServiceClient = null
    try {
      client = SecretManagerServiceClient.create()
      val secretVersionName = SecretVersionName.of(projectId, secretId, versionId)
      val request = AccessSecretVersionRequest.newBuilder().setName(secretVersionName.toString()).build()
      val response = client.accessSecretVersion(request)
      response.getPayload.getData.toStringUtf8()
    } catch {
      case e: Exception =>
        println(s"‚ùå Error accessing secret '$secretId': ${e.getMessage}")
        e.printStackTrace()
        throw e // Re-throw exception if secret cannot be accessed
    } finally {
      if (client != null) client.close()
    }
  }


  def main(args: Array[String]): Unit = {

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Log Level ‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Debug)
    Logger.getLogger("org.apache.spark").setLevel(Level.WARN)
    Logger.getLogger("org.apache.hadoop").setLevel(Level.WARN)
    Logger.getLogger("com.siebel.oracle").setLevel(Level.DEBUG)
    Logger.getLogger("oracle.jdbc").setLevel(Level.DEBUG) // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Debug JDBC
    Logger.getLogger("org.apache.spark.deploy").setLevel(Level.TRACE) // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deploy
    Logger.getLogger("org.apache.spark.scheduler").setLevel(Level.TRACE) // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Scheduler
    // sqlplus 'siebeladmin/Siebel2024@//siebel-oracle-20250614-114148.cbxbuf3oy0lw.ap-southeast-1.rds.amazonaws.com:1521/SIEBEL'

    val gcpProjectId = sys.env.getOrElse("GCP_PROJECT_ID", "ntt-test-data-bq-looker") // ‡∏Ñ‡∏ß‡∏£‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å gcloud command

    val spark = SparkSession.builder()
      .appName("Scala Oracle Connection Test")
      // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ spark.jars ‡∏´‡∏£‡∏∑‡∏≠ extraClassPath ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏à‡∏∞‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô --jars ‡πÅ‡∏•‡∏∞ --properties ‡πÉ‡∏ô gcloud command
      .getOrCreate()

    // Oracle RDS connection configuration
    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Environment Variables
    val oracleUrl = sys.env.getOrElse("ORACLE_URL", 
      "jdbc:oracle:thin:@//siebel-oracle-20250614-114148.cbxbuf3oy0lw.ap-southeast-1.rds.amazonaws.com:1521/SIEBEL") // Default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    val username = sys.env.getOrElse("ORACLE_USER", "siebeladmin") // Default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    val password = sys.env.getOrElse("ORACLE_PASSWORD", "Siebel2024") // Default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    
    // val connectionJsonString = getSecret(gcpProjectId, "sieble-connection") // ‡∏ä‡∏∑‡πà‡∏≠ Secret ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
    // implicit val formats: DefaultFormats.type = DefaultFormats // ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö json4s
    // val connectionDetails = parse(connectionJsonString).extract[Map[String, String]] // Parse ‡πÄ‡∏õ‡πá‡∏ô Map

    // ‡∏î‡∏∂‡∏á user ‡πÅ‡∏•‡∏∞ pass ‡∏à‡∏≤‡∏Å Map
    // val username = connectionDetails("user")
    // val password = connectionDetails("pass")

    println(s"DEBUG: Actual ORACLE_URL from env: $oracleUrl")
    println(s"DEBUG: Actual ORACLE_USER from env: $username")
    println(s"DEBUG: Actual ORACLE_PASSWORD from env: ${"*" * password.length}")

    // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô (‡∏à‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è‡πÉ‡∏ô Driver logs)
    println("==========================================")
    println(s"üîç Connecting to: $oracleUrl")
    println(s"üë§ User: $username")
    println("==========================================")

    try {
      // Test: Basic connection to DUAL table
      println("\nüìã Test: Basic Connection to DUAL table")
      val df_dual = spark.read.format("jdbc")
        .option("url", oracleUrl)
        .option("dbtable", "(SELECT * FROM departments)")
        .option("user", username)
        .option("password", password)
        .option("driver", "oracle.jdbc.driver.OracleDriver")
        .load()
      print("======================================================================  after spark read ======================================================================")
      df_dual.show(false)
      println("‚úÖ Basic connection successful")

      println("\nüéâ All Scala Oracle tests completed successfully")
      println("==========================================")

    } catch {
      case e: Exception =>
        println(s"‚ùå An error occurred during Oracle connection: ${e.getMessage}")
        e.printStackTrace() // ‡∏û‡∏¥‡∏°‡∏û‡πå Stack Trace
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á System.exit(1) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Log ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö
        // ‡πÅ‡∏•‡∏∞ Thread.sleep ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ System.exit(1)
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Thread.sleep ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Log ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        Thread.sleep(60000) // ‡∏£‡∏≠ 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        println("==========================================")
    } finally {
      spark.stop()
    }
  }
}
