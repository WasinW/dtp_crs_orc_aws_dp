// ‡πÉ‡∏ô SimpleOracleConnectionTest.scala
package com.siebel.oracle

import org.apache.spark.sql.SparkSession
import java.util.Properties
import org.apache.log4j.{Logger, Level} 

object SimpleOracleConnectionTest {
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á Secret ‡∏à‡∏≤‡∏Å Secret Manager
  def getSecret(projectId: String, secretId: String, versionId: String = "latest"): String = {
    var client: SecretManagerServiceClient = null
    try {
      client = SecretManagerServiceClient.create()
      val secretVersionName = SecretVersionName.of(projectId, secretId, versionId)
      val request = AccessSecretVersionRequest.newBuilder().setName(secretVersionName.toString()).build()
      val response = client.accessSecretVersion(request)
      response.getPayload.getData.toStringUtf8()
    } catch {
      case e: Exception =>
        println(s"‚ùå Error accessing secret '$secretId': ${e.getMessage}")
        e.printStackTrace()
        throw e // Re-throw exception if secret cannot be accessed
    } finally {
      if (client != null) client.close()
    }
  }

  def main(args: Array[String]): Unit = {

    Logger.getLogger("org.apache.spark").setLevel(Level.WARN)
    Logger.getLogger("org.apache.hadoop").setLevel(Level.WARN)
    Logger.getLogger("com.siebel.oracle").setLevel(Level.DEBUG) 
    Logger.getLogger("oracle.jdbc").setLevel(Level.DEBUG) 

    val spark = SparkSession.builder()
      .appName("Scala Oracle Connection Test")
      .getOrCreate()

    // Oracle RDS connection configuration
    val oracleUrl = sys.env("ORACLE_URL") // **‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Environment Variable**
    // val username = sys.env("ORACLE_USER") // **‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Environment Variable**
    // val password = sys.env("ORACLE_PASSWORD") // **‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏à‡∏≤‡∏Å Environment Variable**

    // ‡∏î‡∏∂‡∏á JSON Secret String
    val connectionJsonString = getSecret(gcpProjectId, "sieble-connection") // ‡∏ä‡∏∑‡πà‡∏≠ Secret ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ
    
    // Parse JSON String
    implicit val formats: DefaultFormats.type = DefaultFormats // ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö json4s
    val connectionDetails = parse(connectionJsonString).extract[Map[String, String]] // Parse ‡πÄ‡∏õ‡πá‡∏ô Map

    // ‡∏î‡∏∂‡∏á user ‡πÅ‡∏•‡∏∞ pass ‡∏à‡∏≤‡∏Å Map
    val username = connectionDetails("user")
    val password = connectionDetails("pass")

    // **DEBUG Print (‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô Log Output)**
    println(s"DEBUG: Actual ORACLE_URL from env: $oracleUrl")
    println(s"DEBUG: Actual ORACLE_USER from env: $username")
    println(s"DEBUG: Actual ORACLE_PASSWORD from env: ${"*" * password.length}") 

    println("==========================================")
    println(s"üîç Connecting to: $oracleUrl")
    println(s"üë§ User: $username")
    println("==========================================")

    try {
      println("\nüìã Test: Basic Connection to DUAL table")
      val df_dual = spark.read.format("jdbc")
        .option("url", oracleUrl)
        .option("dbtable", "(SELECT 'Scala Connection Successful!' as status, SYSDATE as server_time, USER as current_user FROM dual)")
        .option("user", username)
        .option("password", password)
        .option("driver", "oracle.jdbc.driver.OracleDriver")
        .load()

      df_dual.show(false)
      println("‚úÖ Basic connection successful!")

      println("\nüéâ All Scala Oracle tests completed successfully!")
      println("==========================================")

    } catch {
      case e: Exception =>
        println(s"‚ùå An error occurred during Oracle connection: ${e.getMessage}")
        e.printStackTrace() 
        println("==========================================")
    } finally {
      spark.stop()
    }
  }
}